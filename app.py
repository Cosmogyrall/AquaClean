from flask import Flask, render_template, request,redirect,url_for,session,flash,get_flashed_messages
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import os
from sqlalchemy import func
from datetime import datetime,date,time
import pytz
from flask_mail import Mail,Message

# creating the Flask instance ( a WSGI application ) called app
app = Flask(__name__)

#  a 24 byte string randomly generated by the os , and set it as Flask's secret key
app.secret_key = os.urandom(24)

#set the URI for the database to be used
app.config['SQLALCHEMY_DATABASE_URI']='sqlite:///AquaClean.db'

# defining the database
db = SQLAlchemy(app)

# setup the flask-migrate extension
migrate = Migrate(app,db)


# mail configurations
'''SMTP configurations : https://youtu.be/IWxwWFTlTUQ'''
app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USERNAME'] = 'aquaclean61@gmail.com'
app.config['MAIL_PASSWORD'] = 'xpfbrolhvicbbfgl'
app.config['MAIL_USE_TLS'] = False
app.config['MAIL_USE_SSL'] = True

mail = Mail(app)

##########################################################################
###################           MODELS          ############################
##########################################################################
# creating the user model 
class User(db.Model):
    UID = db.Column(db.Integer,primary_key=True)
    fname = db.Column("First Name",db.String(20),nullable=False)
    lname = db.Column("Last Name",db.String(20),nullable=False)
    Phone = db.Column("Phone Number",db.String(10),unique=True, nullable=False)
    email = db.Column("Email",db.String(20),unique=True,nullable=True)
    Address = db.Column("Address",db.String(150),nullable=False)
    password = db.Column("Password",db.String(10))
    # relationship management : 1 to Many
    '''one to many relationship : https://www.youtube.com/watch?v=VVX7JIWx-ss'''
    issue_link = db.relationship('Issue',backref='user_ref')
            #######################################################

#create the issue model
from enum import Enum
class statusEnum(Enum):
   c1 = 'Resolved'
   c2 = "Pending"
   c3 = "Not available"


'''for datetime reference : https://www.geeksforgeeks.org/python-now-function/'''
'''https://docs.python.org/3/library/datetime.html'''
'''https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior'''
class Issue(db.Model):
   IID = db.Column(db.Integer,primary_key=True)
   UID = db.Column(db.Integer,db.ForeignKey('user.UID'),nullable=False)   
   created_at = db.Column(db.DateTime, default=datetime.now(tz=pytz.timezone('Asia/Calcutta')))
   RO_type = db.Column(db.String,nullable=False)
   problem = db.Column(db.String, nullable=False)
   bdate = db.Column(db.String,nullable=False)
   btime = db.Column(db.String,nullable=False)
   status = db.Column(db.Enum(statusEnum),nullable=False, default=statusEnum.c3)
   charges = db.Column(db.Float, default=0.0, nullable=True)
   Review = db.Column(db.String, default="No review available",nullable=True)
           #######################################################


#create the tables
with app.app_context():
    db.create_all()


##########################################################################
###################          URL ROUTES          #########################
##########################################################################

# Starting with the URL to view function routing 
@app.route('/')
def landingPage():
    return render_template('landingPage.html')

###############################

@app.route('/Login')
def Login(method=['POST','GET']):
    return render_template('login.html')

###############################

@app.route('/signup')
def signup():
    return render_template('SignUp.html')

##############################
# the data submitted on the sign up page via post method is processed on the /SignUp successfull url
# and adds the new user to table after which it gives successfull message 
@app.route('/new_signup',  methods=['POST'])
def new():
    f = request.form['fname']
    l = request.form['lname']
    P = request.form['Phone']
    e = request.form['email']
    A = request.form['address']
    p = request.form['password']
    new_user = User(fname=f,lname=l,Phone=P,email=e,Address=A,password=p)
    db.session.add(new_user)
    db.session.commit()
    flash("New user added successfully!! Please login")
    return redirect(url_for('Login'))
#############################

# Home page
@app.route('/home')
def home():
   # grab the UID from the session 
   UID = session.get("user_id")

   # get the user of that UID and send it to home.html
   user = User.query.get(UID)
   return render_template('Home.html',data=user)

#############################

# now handling the login submission data and forwarding it to /Validatelogin url
@app.route('/Validatelogin',methods=['POST','GET'])
def validateLogin():
    #firstly clear the session
    session.clear()
    if request.method=='POST':
        # get the data from the login form 
        P = request.form['Phone']
        pwd = request.form['password']

        # search the database using P and pwd
        user = User.query.filter_by(password=pwd, Phone=P).first()
        
        # if match found in database(user exists) then generate a session for that user and add 
        # user.UID to session. 
        if user:
         session['user_id'] = user.UID
         #flash("Login Successfull!")
         return redirect(url_for('home'))
        # if not valid flash the msgs and redirect to login page again
        else:
         flash( "Invalid credentials. Please try again.")
         return redirect(url_for('Login'))
        
###############################
# forgot password
@app.route('/reset_password')
def resetPassword():
   return render_template ('resetPassword.html')

############################### 
# logout function 
@app.route('/logout')
def logout():
   session.pop('user_id')
   flash("logged out successfully!")
   logout_msg = get_flashed_messages()
   return render_template('login.html',logout_msg=logout_msg)

###############################   
# page to view the records in the user database
@app.route('/user_data')
def show_user_records():
   records = User.query.all()
   return render_template('user_records.html',records=records)

###############################
# clear the records in the user database
# UID ==0 delete all records
# UID>0 delete that UID associated record
'''@app.route('/deleteDB/<int:UID>')
def delete_records(UID):
   if UID > 0: 
     user = User.query.get(UID)
     db.session.delete(user)
     db.session.commit()
   else: 
      User.query.delete()
      db.session.commit()
   records = User.query.all()
   return render_template('records.html',records=records)
'''
@app.route('/delete_userDB')
def delete_user_records():
   User.query.delete()
   db.session.commit()
   records = User.query.all()
   return render_template('user_records.html',records=records)

   
###############################
# recieving the booking data from the home.html form
@app.route('/new_issue', methods=["POST"])
def create_issue():
   prb = request.form['problem']
   ro = request.form['RO/UV']

   '''convert date to proper python format'''
   d = request.form['date'] # string
   d = date.fromisoformat(d)
   date_string = date.strftime(d,"%d-%b-%Y") # convert to string in format

   '''convert time to propery pyhton format '''
   t = request.form['time'] # string
   t = time.fromisoformat(t)
   time_string = time.strftime(t, '%I:%M%p') # string in format

   '''getting the User id from session'''
   id = session.get("user_id")

   new_booking = Issue(RO_type=ro,problem=prb,bdate=date_string,btime=time_string)
   ''' associte new booking with the issue attribute of the User'''
   user = User.query.filter(User.UID==id).first()
   user.issue_link.append(new_booking)
   
   '''add the new booking to issue database'''
   db.session.add(new_booking)
   db.session.commit()

   '''send the data to prep the confirmation email'''
   return redirect(url_for('send_cmail',iid=new_booking.IID))


###############################
@app.route('/send_mail_toclient/<int:iid>')
def send_cmail(iid):
   '''send mail to client'''
   '''get the issue from iid'''
   issue = Issue.query.get(iid)
   '''name for sending to email'''
   first_name = issue.user_ref.fname

   '''get the uid from issue by using backref attribute'''
   uid = issue.user_ref.UID

   '''name for sending to home page extract the user'''
   user = User.query.filter(User.UID==uid).first()

   '''get the user email from the issue by backref attribute'''
   user_email = issue.user_ref.email

   '''get the booking date and time'''
   date = issue.bdate
   time = issue.btime

   '''get the user contact number'''
   phone = issue.user_ref.Phone
  
   ''' frame the message'''
   msg = Message('Appointment Confirmation',sender='aquaclean61@gmail.com',recipients=[user_email])
   ''' send these fields to server_to_client.html  '''
   html_content = render_template('server_to_client.html',phone=phone,fname=first_name,iid=iid,date=date,time=time)
   msg.html = html_content
   '''add aquaclean as bcc'''
   msg.bcc = ['aquaclean61@gmail.com']
   mail.send(msg)

   '''clear the flash messages from the session'''
   session.pop('_flashes',None)

   '''flash the confirmation msg'''
   flash("Appointment booked ! Please check your registered Email ID.")
   alert = get_flashed_messages()
   return render_template('Home.html',flash_msg=alert,data=user)

###############################
# showing all the bookings in the issues table
@app.route('/issue_data')
def get_issue_records():
   records = Issue.query.all()
   return render_template('issue_records.html',records=records)

###############################
@app.route('/delete_issueDB')
def delete_issue_records():
   Issue.query.delete()
   db.session.commit()
   records = Issue.query.all()
   return render_template('issue_records.html',records = records)

################################################################################      

if __name__=='__main__':
    app.run(debug=True)

